#! /bin/sh
 
##############################################################################
#                              M C R L _ O P E N
#-----------------------------------------------------------------------------
#   INRIA - Unite de Recherche Rhone-Alpes
#   655, avenue de l'Europe
#   38330 Montbonnot Saint Martin
#   FRANCE
#-----------------------------------------------------------------------------
#   Module             :       mcrl_open
#   Auteurs            :       Hubert GARAVEL and Jaco van de POL
#   Version            :       1.1
#   Date               :       04/05/05 18:21:35
#############################################################################/

set -e

COMMAND=`basename $0`
ARCH=`$CADP/com/arch`
CC=$CADP/src/com/cadp_cc

BIN=$CADP/bin.$ARCH
SRC=$CADP/src/open_caesar

# recording the command-line for OCIS
 
OPEN_CAESAR_COMMAND="$0 $*"
export OPEN_CAESAR_COMMAND

if test "$SENVA_DEBUG" != ""
then
	# debugging mode used internally by the SENVA team
        MCRL_VERSION=2.14.7
	MCRL_PREFIX=/home/vdpol
	MCRL_LIB=$MCRL_PREFIX/lib
	# for cc: remove -export-dynamic
	MCRL_LD_FLAGS="-L. -L$MCRL_LIB -llts -lstep -lmcrl -ldl -lsvc -lATerm -lmcrlunix -L/usr/lib -export-dynamic"
else
	# the following variables are initialised by "configure"
        datarootdir=@datarootdir@
	MCRL_VERSION=@VERSION@
	prefix=@prefix@
	MCRL_PREFIX=$prefix
	exec_prefix=@exec_prefix@
	datadir=@datadir@
        top_srcdir=@top_srcdir@
	MCRL_LIB=@libdir@
	MCRL_LD_FLAGS="$MCRL_LIB/mcrl_open.o -L. -L../src -L../aterm -L$MCRL_LIB -llts -lstep -lmcrl -lprover @LIBS@ @LDFLAGS@"
fi

# phase 1: parsing the options

MCRL_OPTIONS=""
export MCRL_OPTIONS

while true
do
	if test $# -lt 1
	then
		echo "$COMMAND: missing \`\`.tbf'' filename argument"
		exit 1
	fi
	case $1 in
		-version )
			echo $MCRL_VERSION
			exit 0
			;;
                -help )
		        cat $datadir/README_mcrl_open
			exit 0
                        ;;
		-alt | -confluent )
			if test $# -le 2
			then
				echo "$COMMAND: missing value for option $1"
				exit 1
			fi
			MCRL_OPTIONS="$MCRL_OPTIONS $1 $2"
			shift 2
			;;	
		-* )
			MCRL_OPTIONS="$MCRL_OPTIONS $1"
			shift 1
			;;
		* )
			break
			;;
	esac
done

# phase 2: parsing the TBF filename (TODO: the value of $FILE may contain spaces)

FILE=`dirname "$1"`/`basename "$1" .tbf`
shift

if test ! -f "$FILE.tbf"
then
	echo "$COMMAND: file \`\`$FILE.tbf'' does not exist"
	exit 1
fi

# phase 3: passing the TBF filename to the C library

OPEN_CAESAR_FILE="$FILE.tbf"
export OPEN_CAESAR_FILE

# phase 4: parsing the options for cc(1) and preparing other options

CPPFLAGS="-I. -I$CADP/incl -I$SRC"
CFLAGS=""

if test "$SENVA_DEBUG" != ""
then
	# debugging mode used internally by the SENVA team
	LDFLAGS=" -I$CADP/incl -I$MCRL_PREFIX/include ./mcrl_open.c $MCRL_LD_FLAGS -L$CADP/bin.$ARCH -lcaesar -lm"
else
	LDFLAGS="$MCRL_LD_FLAGS -L$CADP/bin.$ARCH -lcaesar -lm"
fi

while true
do
	if test $# -lt 1
	then
		echo "$COMMAND: missing C filename argument"
		exit 1
	fi
	case $1 in
		-[DI]* ) CPPFLAGS="$CPPFLAGS $1"
			 shift
			 ;;
		-[lL]* ) LDFLAGS="$LDFLAGS $1"
			 shift
			 ;;
		-* ) CFLAGS="$CFLAGS $1"
		     shift
		     ;;
		*) break
		   ;; 
	esac
done

# phase 5: parsing the ``.c'', ``.o'', or ``.a'' filename, possibly looking in
#          $SRC or $BIN if the file is not present in the current directory

NAME=$1
shift

case "$NAME" in
	*.c )	
		if test -f $NAME
		then
			USER="$NAME"
		elif test -f $SRC/$NAME
		then
			USER="$SRC/$NAME"
		else
			echo "$COMMAND: file \`\`$NAME'' does not exist"
			exit 1
		fi
		;;

	*.o | *.a )
		if test -f $NAME
		then
			USER="$NAME"
		elif test -f $BIN/$NAME
		then
			USER="$BIN/$NAME"
		else
			echo "$COMMAND: file \`\`$NAME'' does not exist"
			exit 1
		fi
		;;

	* )
		if test -f $NAME.c
		then
			USER="$NAME.c"
		elif test -f $SRC/$NAME.c
		then
			USER="$SRC/$NAME.c"
		elif test -f $NAME.a
		then
			USER="$NAME.a"
		elif test -f $BIN/$NAME.a
		then
			USER="$BIN/$NAME.a"
		elif test -f $NAME.o
		then
			USER="$NAME.o"
		elif test -f $BIN/$NAME.o
		then
			USER="$BIN/$NAME.o"
		else
			echo "$COMMAND: cannot locate \`\`$NAME''"
			exit 1
		fi
esac

if test "$USER" != "$NAME"
then
	echo "$COMMAND: using \`\`$USER''"
fi

# phase 6: updating compiler options, if necessary

case "$USER" in
	*.c )
		CPPFLAGS_AUX=`grep '@(#)CPPFLAGS' $USER | sed -e 's/.*".*=\(.*\)".*/\1/' | sed -e 's/\\\"/"/g'`
		CFLAGS_AUX=`grep '@(#)CFLAGS' $USER | sed -e 's/.*".*=\(.*\)".*/\1/' | sed -e 's/\\\"/"/g'`
		LDFLAGS_AUX=`grep '@(#)LDFLAGS' $USER | sed -e 's/.*".*=\(.*\)".*/\1/' | sed -e 's/\\\"/"/g'`
		LD_LIBRARY_PATH_AUX=`grep '@(#)LD_LIBRARY_PATH' $USER | sed -e 's/.*".*=\(.*\)".*/\1/' | sed -e 's/\\\"/"/g'`
		;;
	*.o | *.a )
		LC_CTYPE="C" ; export LC_CTYPE
		CPPFLAGS_AUX=`strings $USER 2> /dev/null | grep '@(#)CPPFLAGS' | sed -e 's/.*=//'`
		CFLAGS_AUX=`strings $USER 2> /dev/null | grep '@(#)CFLAGS' | sed -e 's/.*=//'`
		LDFLAGS_AUX=`strings $USER 2> /dev/null | grep '@(#)LDFLAGS' | sed -e 's/.*=//'`
		LD_LIBRARY_PATH_AUX=`strings $USER 2> /dev/null | grep '@(#)LD_LIBRARY_PATH' | sed -e 's/.*=//'`
		;;
esac

CPPFLAGS_AUX=`eval echo $CPPFLAGS_AUX`
if test "$CPPFLAGS_AUX" != ""
then
	CPPFLAGS="$CPPFLAGS $CPPFLAGS_AUX"
fi

CFLAGS_AUX=`eval echo $CFLAGS_AUX`
if test "$CFLAGS_AUX" != ""
then
	CFLAGS="$CFLAGS $CFLAGS_AUX"
fi

LDFLAGS_AUX=`eval echo $LDFLAGS_AUX`
if test "$LDFLAGS_AUX" != ""
then
	LDFLAGS="$LDFLAGS $LDFLAGS_AUX"
fi

LD_LIBRARY_PATH_AUX=`eval echo $LD_LIBRARY_PATH_AUX`
if test "$LD_LIBRARY_PATH_AUX" != ""
then
      case $ARCH in
         macOS ) DYLD_LIBRARY_PATH="$LD_LIBRARY_PATH_AUX:$DYLD_LIBRARY_PATH"
                 export DYLD_LIBRARY_PATH
                 ;;
         * )     LD_LIBRARY_PATH="$LD_LIBRARY_PATH_AUX:$LD_LIBRARY_PATH"
                 export LD_LIBRARY_PATH
                 ;;
      esac 
fi

# phase 7: compilation and link edition of $USER

case "$USER" in
	*.c )
		PROG=`basename $USER .c`
		$CC $CPPFLAGS $CFLAGS -c $USER -o $PROG.o
		$CC $CFLAGS $PROG.o $LDFLAGS -o $PROG
		rm -f $PROG.o
		;;
	*.o )
		PROG=`basename $USER .o`
		$CC $CFLAGS $USER $LDFLAGS -o $PROG
		;;
	*.a )
		PROG=`basename $USER .a`
		$CC $CFLAGS $USER $LDFLAGS -o $PROG
		;;
esac

# phase 8: program execution (here, "$@" denotes the arguments, if any, to
# be passed to the program, and $# denotes the number of these arguments)

if test "$#" -eq 0
then
	echo "$COMMAND: running \`\`$PROG'' for \`\`$FILE.tbf''"
else
	echo "$COMMAND: running \`\`$PROG $@'' for \`\`$FILE.tbf''"
fi
./$PROG "$@"

exit 0

