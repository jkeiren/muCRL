#line 2 "mcrlparse.h"

#line 4 "mcrlparse.h"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer mcrl_create_buffer
#define yy_delete_buffer mcrl_delete_buffer
#define yy_flex_debug mcrl_flex_debug
#define yy_init_buffer mcrl_init_buffer
#define yy_flush_buffer mcrl_flush_buffer
#define yy_load_buffer_state mcrl_load_buffer_state
#define yy_switch_to_buffer mcrl_switch_to_buffer
#define yyin mcrlin
#define yyleng mcrlleng
#define yylex mcrllex
#define yylineno mcrllineno
#define yyout mcrlout
#define yyrestart mcrlrestart
#define yytext mcrltext
#define yywrap mcrlwrap
#define yyalloc mcrlalloc
#define yyrealloc mcrlrealloc
#define yyfree mcrlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mcrlrestart(mcrlin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int mcrlleng;

extern FILE *mcrlin, *mcrlout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE mcrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-mcrllineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < mcrlleng; ++yyl )\
                    if ( mcrltext[yyl] == '\n' )\
                        --mcrllineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mcrltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up mcrltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mcrlrestart()), so that the user can continue scanning by
	 * just pointing mcrlin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when mcrltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int mcrlleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow mcrlwrap()'s to do buffer switches
 * instead of setting up a fresh mcrlin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void mcrlrestart (FILE *input_file  );
void mcrl_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE mcrl_create_buffer (FILE *file,int size  );
void mcrl_delete_buffer (YY_BUFFER_STATE b  );
void mcrl_flush_buffer (YY_BUFFER_STATE b  );
void mcrlpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void mcrlpop_buffer_state (void );

static void mcrlensure_buffer_stack (void );
static void mcrl_load_buffer_state (void );
static void mcrl_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER mcrl_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE mcrl_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE mcrl_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE mcrl_scan_bytes (yyconst char *bytes,int len  );

void *mcrlalloc (yy_size_t  );
void *mcrlrealloc (void *,yy_size_t  );
void mcrlfree (void *  );

#define yy_new_buffer mcrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mcrlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mcrl_create_buffer(mcrlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mcrlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mcrl_create_buffer(mcrlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define mcrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *mcrlin = (FILE *) 0, *mcrlout = (FILE *) 0;

typedef int yy_state_type;

extern int mcrllineno;

int mcrllineno = 1;

extern char *mcrltext;
#define yytext_ptr mcrltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up mcrltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	mcrlleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[424] =
    {   0,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       46,   46,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   58,   56,
       49,   51,   50,   56,   56,   56,   56,   56,   56,   56,
       56,   56,    8,   56,    8,    8,    8,    8,    8,    8,

        8,    8,    8,   16,   56,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   17,   56,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   14,   56,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   15,   56,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   12,   56,   13,
       56,   28,   28,   28,   52,   49,   50,   23,   23,   25,
       26,   27,   56,   24,   56,   32,   33,   31,   56,   34,
       56,   19,   20,   18,   56,   21,   56,   36,   56,   35,
       56,   38,   56,   48,   48,   47,   48,   30,   56,   29,
       53,   49,   50,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   54,   49,   50,   55,   49,   50,   45,
       56,   41,   40,   39,   42,   43,   44,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   49,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   16,    0,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   17,
        0,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       14,    0,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   15,    0,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   12,    0,   13,    0,   27,    0,   24,    0,

       31,    0,   34,    0,   18,    0,   21,    0,   22,   37,
       35,    0,   38,    0,   48,   48,   48,   30,    0,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   45,
        0,   41,   40,   39,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    4,    0,    6,
        0,    5,    1,    8,    8,    8,    8,    8,    1,   16,
       16,   16,   16,   16,    1,   17,   17,   17,   17,   17,
        1,   14,   14,   14,   14,   14,    1,   15,   15,   15,
       15,   15,   48,   48,   48,    1,   46,   46,   46,   46,
       46,   11,    0,    0,    0,    0,   10,    0,    9,    3,

        2,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    4,    1,    5,    1,    6,    7,
        8,    1,    9,   10,   11,    9,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    9,
       14,   15,    1,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    6,    6,    1,   16,    6,   17,    6,

       18,   19,    6,    6,   20,    6,    6,    6,   21,   22,
       23,   24,    6,   25,   26,   27,   28,   29,   30,    6,
        6,    6,    9,    9,    9,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[31] =
    {   0,
        1,    1,    2,    3,    1,    4,    3,    3,    3,    3,
        4,    4,    3,    3,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[468] =
    {   0,
        0,   28,   57,    0,   87,    0,  117,    0,  147,    0,
      177,    0,  207,    0,  237,    0,    4,    8,   32,  266,
      272,    0,  282,    0, 1201, 1200,  312,    0,   33,  336,
      349,    0,  379,    0,  403,  407,  420,    0,  450,    0,
      477,  485,  496,    0,  526,    0,  555,  559,  558,  562,
      566,  570,  574,  578,  588,    0,  612,  617,  627,  631,
      636,    0,  665,  669,  673,  677,  682,    0,  706,  712,
      718,  724,  730,  736,  742,  749,  747,    0, 1206, 1209,
     1203, 1209,    0, 1187, 1180, 1174, 1179, 1184, 1174, 1180,
     1174, 1180, 1184, 1183,    1,    4,   27,  259,   12,   11,

      401,  471,   40, 1182, 1181,  261,  548,  730,  743,  475,
      610,  472,  552,  612, 1180, 1179,  704,  556,  750,  758,
      759,  722,  763,  658,  766, 1178, 1177,  706,  716,  768,
      772,  773,  774,  775,  777,  776, 1176, 1175,  718,  779,
      780,  784,  787,  786,  794,  790,  793, 1174, 1173, 1172,
     1171, 1209, 1179,    0, 1209, 1178,    0, 1209, 1209, 1209,
     1209, 1168, 1167, 1166, 1165, 1209, 1209, 1164, 1163, 1162,
     1161, 1209, 1209, 1160, 1159, 1158,  572, 1209, 1153, 1156,
     1155, 1154, 1153,    0, 1161, 1209,    0, 1151, 1150, 1209,
     1209, 1158,    0,    0, 1142, 1135, 1129, 1134, 1139, 1129,

     1135, 1129, 1135, 1209, 1148,    0, 1209, 1147,    0, 1137,
     1136, 1134, 1133, 1132, 1209, 1209, 1209, 1126, 1119, 1113,
     1118, 1123, 1113, 1119, 1113, 1119, 1132,    0, 1106, 1111,
     1109, 1110, 1105, 1105, 1097, 1101, 1100, 1113, 1112,  796,
       21,  799,  804,  803,  805,  806,  807,  808, 1111, 1110,
      811,  809,  815,  814,  818,  820,  824,  828,  830, 1109,
     1108,  829,  836,  837,  838,  839,  841,  835,  849,  850,
     1107, 1106,  840,  851,  855,  858,  857,  859,  860,  862,
      868, 1105, 1104,  865,  873,  869,  875,  872,  874,  877,
      878,  887, 1103, 1102, 1101, 1100, 1099, 1098, 1097, 1096,

     1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 1209, 1209,
     1087, 1086, 1085, 1084,    0, 1092,    0, 1082, 1081,    0,
     1064, 1069, 1067, 1068, 1063, 1063, 1055, 1059, 1058, 1071,
     1070, 1068, 1067, 1066, 1050, 1055, 1053, 1054, 1049, 1049,
     1041, 1045, 1044, 1209, 1047, 1050, 1039, 1209, 1048, 1209,
     1035, 1209, 1047,  888,  734,  889,  891,  890, 1043,  893,
      894,  895,  902,  899, 1039,  904,  907,  909,  910,  912,
     1035,  917,  918,  919,  920,  921, 1031,  922,  923,  930,
      933,  931,    0, 1036,    0,    0, 1013, 1013,  999, 1005,
      991, 1209,  993,  993,  979,  985, 1209,  969, 1209, 1209,

     1209,    0,  990,    0,    0,  986,    0,    0,  954,    0,
        0,  953,    0,    0,  952,    0,    0,  951,    0, 1209,
      950,    0, 1209,  958,  962,  966,  970,  974,  978,  982,
      986,  947,  945,  943,  941,  841,  840,  673,  669,  414,
      344,  343,  341,  272,   46,   10,  990,  994,    4,  996,
        0, 1000, 1004, 1008, 1012, 1016, 1020, 1024, 1028, 1032,
     1036, 1040, 1044, 1048, 1052, 1056, 1060
    } ;

static yyconst flex_int16_t yy_def[468] =
    {   0,
      424,  424,  423,    3,  423,    5,  423,    7,  423,    9,
      423,   11,  423,   13,  423,   15,  425,  425,  426,  426,
      424,   21,  423,   23,   21,   21,  423,   27,   21,   21,
      423,   31,  423,   33,   21,   21,  423,   37,  423,   39,
       21,   21,  423,   43,  423,   45,  427,  427,   21,   21,
       21,   21,   21,   21,  423,   55,   21,   21,  428,  428,
      423,   61,  429,  429,  430,  430,  423,   67,   21,   21,
       21,   21,   21,   21,   21,   21,    2,   77,  423,  423,
      423,  423,  431,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  437,  437,  438,
      438,  423,  423,  431,  423,  423,  431,  423,  423,  423,
      423,  439,  439,  440,  440,  423,  423,  441,  441,  442,
      442,  423,  423,  443,  443,  444,  444,  423,  423,  445,
      445,  446,  446,  447,  447,  423,  448,  449,  449,  423,
      423,  423,  431,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  423,  423,  431,  423,  423,  431,  451,
      451,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  431,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  437,  437,  438,  438,  439,  439,  440,  440,

      441,  441,  442,  442,  443,  443,  444,  444,  423,  423,
      445,  445,  446,  446,  452,  452,  453,  449,  449,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  451,
      451,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  432,  432,  432,  432,  432,  432,  433,  433,
      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      435,  435,  435,  435,  435,  435,  436,  436,  436,  436,
      436,  436,  454,  454,  455,  450,  450,  450,  450,  450,
      450,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  456,  456,  457,  458,  458,  459,  460,  460,  461,
      462,  462,  463,  464,  464,  465,  466,  466,  467,  423,
      423,  431,    0,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423
    } ;

static yyconst flex_int16_t yy_nxt[1240] =
    {   0,
      423,   81,   82,  330,   83,  153,   82,  318,  154,  153,
       82,  239,  154,  313,  239,   84,   85,  240,   86,   87,
       88,  239,  239,   89,   90,   91,  241,  244,   92,   81,
       82,  239,   83,  156,   82,  245,  157,  239,  158,   80,
       80,  354,  166,   84,   85,  167,   86,   87,   88,  311,
      239,   89,   90,   91,  242,  248,   92,   80,   81,   82,
       80,   83,   93,   80,   80,   80,   80,   94,   93,   80,
       80,   80,   95,   96,   93,   97,   98,   99,   93,   93,
      100,  101,  102,   93,   93,  103,   93,   80,   81,   82,
       80,   83,  104,   80,   80,   80,   80,  105,  104,   80,

       80,   80,  106,  107,  104,  108,  109,  110,  104,  104,
      111,  112,  113,  104,  104,  114,  104,   80,   81,   82,
       80,   83,  115,   80,   80,   80,   80,  116,  115,   80,
       80,   80,  117,  118,  115,  119,  120,  121,  115,  115,
      122,  123,  124,  115,  115,  125,  115,   80,   81,   82,
       80,   83,  126,   80,   80,   80,   80,  127,  126,   80,
       80,   80,  128,  129,  126,  130,  131,  132,  126,  126,
      133,  134,  135,  126,  126,  136,  126,   80,   81,   82,
       80,   83,  137,   80,   80,   80,   80,  138,  137,   80,
       80,   80,  139,  140,  137,  141,  142,  143,  137,  137,

      144,  145,  146,  137,  137,  147,  137,   80,   81,   82,
       80,   83,  148,   80,   80,   80,   80,  149,  148,   80,
       80,   80,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,   80,   81,   82,
       80,   83,  150,   80,   80,   80,   80,  151,  150,   80,
       80,   80,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  156,   82,  239,
      157,  250,  158,   81,   82,  307,   83,  251,  159,  160,
      243,  161,   80,   81,   82,   80,   83,  162,   80,   80,
       80,   80,  163,  162,   80,   80,   80,  162,  162,  162,

      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,   80,   81,   82,   80,   83,  164,   80,   80,
       80,   80,  165,  164,   80,   80,   80,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,   80,   80,  305,  166,  303,  301,  167,   80,
       81,   82,   80,   83,  168,   80,   80,   80,   80,  169,
      168,   80,   80,   80,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,   80,
       81,   82,   80,   83,  170,   80,   80,   80,   80,  171,
      170,   80,   80,   80,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,   80,
       80,  239,  172,   80,   80,  173,  172,  299,  246,  173,
       80,   81,   82,   80,   83,  174,   80,   80,   80,   80,
      175,  174,   80,   80,   80,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
       80,   81,   82,   80,   83,  176,   80,   80,   80,   80,
      177,  176,   80,   80,   80,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      178,  239,  250,   80,   80,  250,   80,  179,  178,  257,
      255,   80,   80,  247,   80,  179,   80,   81,   82,   80,

       83,  180,   80,   80,   80,   80,  181,  180,   80,   80,
       80,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,   80,   81,   82,   80,
       83,  182,   80,   80,   80,   80,  183,  182,   80,   80,
       80,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  185,  186,  250,  187,
      185,  186,  250,  187,   80,   80,  261,   80,   80,   80,
      252,   80,   80,   80,  258,   80,   80,   80,  263,   80,
       80,   80,  308,   80,   80,   80,  309,   80,   80,   81,
       82,   80,   83,  188,   80,   80,   80,   80,  189,  188,

       80,   80,   80,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   80,   80,
      250,   80,  250,   80,   80,  190,   80,  259,  192,   82,
      190,  193,  192,   82,  256,  193,   80,   81,   82,  194,
       83,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  195,  196,  194,  197,  198,  199,  194,  194,  200,
      201,  202,  194,  194,  203,  194,  205,   82,  261,  206,
      205,   82,  297,  206,  208,   82,  295,  209,  208,   82,
      269,  209,   80,   81,   82,   80,   83,  210,   80,   80,
       80,   80,  211,  210,   80,   80,   80,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,   80,   80,  261,   80,  272,  212,   80,   80,
      262,   80,  273,  212,   80,   80,  272,   80,  283,  213,
       80,   80,  261,   80,  284,  213,   80,   80,  274,   80,
      250,  214,   80,   80,  239,   80,  267,  214,   80,   80,
      353,  215,  216,  250,  217,   80,   80,  253,  215,  216,
      261,  217,  218,  219,  254,  220,  221,  222,  261,  261,
      223,  224,  225,  261,  266,  226,  261,  264,  272,  265,
      268,  270,  272,  272,  272,  272,  272,  272,  277,  283,
      283,  281,  279,  276,  283,  275,  283,  283,  278,  280,

      283,  285,  288,  283,  283,  287,  239,  286,  292,  239,
      289,  290,  291,  239,  239,  239,  239,  239,  239,  250,
      355,  250,  353,  356,  250,  250,  353,  357,  250,  360,
      250,  358,  353,  362,  250,  353,  361,  359,  250,  261,
      250,  359,  363,  293,  282,  261,  261,  261,  261,  261,
      272,  261,  364,  359,  359,  365,  366,  368,  367,  261,
      261,  272,  365,  369,  365,  272,  371,  272,  272,  272,
      272,  372,  272,  370,  365,  283,  373,  374,  272,  283,
      371,  375,  283,  283,  283,  283,  376,  283,  283,  371,
      379,  377,  371,  378,  380,  377,  381,  283,  239,  239,

      239,  239,  382,  250,  250,  250,  377,  353,  353,  250,
      359,  377,  250,  359,  261,  353,  353,  261,  359,  261,
      261,  359,  261,  365,  365,  359,  365,  272,  272,  272,
      272,  272,  283,  283,  371,  365,  371,  371,  365,  377,
      283,  283,  377,  283,  271,  371,  260,  371,  249,  377,
      238,  227,  421,  418,  415,  412,  377,  377,   80,   80,
       80,   80,  152,  152,  152,  152,  155,  155,  155,  155,
      184,  184,  184,  184,  191,  191,  191,  191,  204,  204,
      204,  204,  207,  207,  207,  207,  228,  409,  228,  228,
      315,  406,  315,  315,  317,  392,  317,  317,  320,  320,

      383,  392,  383,  383,  385,  392,  385,  385,  402,  392,
      402,  402,  404,  392,  404,  404,  405,  386,  405,  405,
      407,  386,  407,  407,  408,  386,  408,  408,  410,  386,
      410,  410,  411,  386,  411,  411,  413,  403,  413,  413,
      414,  283,  414,  414,  416,  272,  416,  416,  417,  261,
      417,  417,  419,  250,  419,  419,  420,  239,  420,  420,
      422,  401,  422,  422,  344,  344,  400,  344,  399,  398,
      397,  396,  392,  395,  394,  393,  392,  334,  333,  332,
      331,  331,  386,  391,  386,  390,  386,  389,  388,  387,
      386,  319,  319,  384,  314,  314,  312,  312,  308,  308,

      306,  306,  304,  304,  302,  302,  300,  300,  298,  298,
      296,  296,  294,  294,  283,  283,  272,  272,  261,  261,
      250,  250,  239,  239,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  227,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  331,  227,  227,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  227,
      319,  319,  316,  314,  314,  312,  312,  310,  308,  306,
      306,  304,  304,  302,  302,  300,  300,  298,  298,  227,
      227,  296,  296,  294,  294,  283,  283,  272,  272,  261,
      261,  250,  250,  239,  239,  237,  236,  235,  234,  233,

      232,  231,  230,  229,  227,  423,   80,   80,   79,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423
    } ;

static yyconst flex_int16_t yy_chk[1240] =
    {   0,
        0,    1,    1,  451,    1,   17,   17,  449,   17,   18,
       18,   95,   18,  446,   96,    1,    1,   95,    1,    1,
        1,  100,   99,    1,    1,    1,   96,   99,    1,    2,
        2,  241,    2,   19,   19,  100,   19,   97,   19,   29,
       29,  241,   29,    2,    2,   29,    2,    2,    2,  445,
      103,    2,    2,    2,   97,  103,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   20,   20,   98,
       20,  106,   20,   21,   21,  444,   21,  106,   21,   21,
       98,   21,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   30,   30,  443,   30,  442,  441,   30,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   35,
       35,  101,   35,   36,   36,   35,   36,  440,  101,   36,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       41,  102,  112,   41,   41,  110,   41,   41,   42,  112,
      110,   42,   42,  102,   42,   42,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   47,   47,  107,   47,
       48,   48,  113,   48,   49,   49,  118,   49,   50,   50,
      107,   50,   51,   51,  113,   51,   52,   52,  118,   52,
       53,   53,  177,   53,   54,   54,  177,   54,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   57,   57,
      111,   57,  114,   58,   58,   57,   58,  114,   59,   59,
       58,   59,   60,   60,  111,   60,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   63,   63,  124,   63,
       64,   64,  439,   64,   65,   65,  438,   65,   66,   66,
      124,   66,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   69,   69,  117,   69,  128,   69,   70,   70,
      117,   70,  128,   70,   71,   71,  129,   71,  139,   71,
       72,   72,  122,   72,  139,   72,   73,   73,  129,   73,
      108,   73,   74,   74,  355,   74,  122,   74,   75,   75,
      355,   75,   75,  109,   75,   76,   76,  108,   76,   76,
      119,   76,   77,   77,  109,   77,   77,   77,  120,  121,
       77,   77,   77,  123,  121,   77,  125,  119,  130,  120,
      123,  125,  131,  132,  133,  134,  136,  135,  132,  140,
      141,  136,  134,  131,  142,  130,  144,  143,  133,  135,

      146,  140,  143,  147,  145,  142,  240,  141,  147,  242,
      144,  145,  146,  244,  243,  245,  246,  247,  248,  252,
      242,  251,  240,  243,  254,  253,  244,  245,  255,  252,
      256,  247,  248,  254,  257,  246,  253,  251,  258,  262,
      259,  255,  256,  437,  436,  268,  263,  264,  265,  266,
      273,  267,  258,  257,  259,  262,  263,  265,  264,  269,
      270,  274,  266,  267,  268,  275,  273,  277,  276,  278,
      279,  274,  280,  269,  270,  284,  275,  276,  281,  286,
      277,  278,  288,  285,  289,  287,  280,  290,  291,  279,
      286,  284,  281,  285,  287,  288,  289,  292,  354,  356,

      358,  357,  291,  360,  361,  362,  290,  357,  354,  364,
      361,  292,  363,  360,  366,  356,  358,  367,  363,  368,
      369,  362,  370,  367,  366,  364,  369,  372,  373,  374,
      375,  376,  378,  379,  373,  368,  375,  372,  370,  379,
      380,  382,  378,  381,  435,  374,  434,  376,  433,  381,
      432,  421,  418,  415,  412,  409,  380,  382,  424,  424,
      424,  424,  425,  425,  425,  425,  426,  426,  426,  426,
      427,  427,  427,  427,  428,  428,  428,  428,  429,  429,
      429,  429,  430,  430,  430,  430,  431,  406,  431,  431,
      447,  403,  447,  447,  448,  398,  448,  448,  450,  450,

      452,  396,  452,  452,  453,  395,  453,  453,  454,  394,
      454,  454,  455,  393,  455,  455,  456,  391,  456,  456,
      457,  390,  457,  457,  458,  389,  458,  458,  459,  388,
      459,  459,  460,  387,  460,  460,  461,  384,  461,  461,
      462,  377,  462,  462,  463,  371,  463,  463,  464,  365,
      464,  464,  465,  359,  465,  465,  466,  353,  466,  466,
      467,  351,  467,  467,  349,  347,  346,  345,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  319,  318,  316,  314,  313,  312,  311,  308,  307,

      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  283,  282,  272,  271,  261,  260,
      250,  249,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  214,  213,  212,  211,  210,  208,  205,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  192,
      189,  188,  185,  183,  182,  181,  180,  179,  176,  175,
      174,  171,  170,  169,  168,  165,  164,  163,  162,  156,
      153,  151,  150,  149,  148,  138,  137,  127,  126,  116,
      115,  105,  104,   94,   93,   92,   91,   90,   89,   88,

       87,   86,   85,   84,   81,   79,   26,   25,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[58] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int mcrl_flex_debug;
int mcrl_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *mcrltext;
#line 1 "mcrlparse.l"
#line 2 "mcrlparse.l"

/* $Id: mcrlparse.l,v 1.11 2004/05/06 09:28:26 bertl Exp $ */

#include <stdlib.h>
#include "aterm2.h"

#ifndef INITSIZE
#define INITSIZE 100
#endif
#define ESIZE 30

typedef struct {
  ATerm *e;
  int pt, size;
  } STACK;

typedef struct {
  char e[ESIZE];
  int left, right;
  }  WIN;
  
#define YY_USER_ACTION Copy2Win();

#define IsBottom(x) (ATgetType(x)==AT_LIST)
#define PushBottom(x) (PushTerm((ATerm) ATmakeList1(x)))
  
static void less(int n);

static WIN yy_win;

static char yy_msg[256], *yy_msgpt = yy_msg;

static ATbool enter_term_begin = ATfalse, enter_num_begin = ATfalse,
              enter_termlist_begin = ATfalse, enter_eq_begin = ATfalse,
              dummyHeader = ATfalse;

static ATermList yy_vars = NULL , yy_eqs = NULL , yy_sorts = NULL, 
    yy_funcs = NULL, yy_maps = NULL;

#define min(x,y) (x<=y?(x):(y));



static ATerm result = NULL;

static STACK term_s={NULL,0,0};
 
static void Enlarge(STACK *s) {
    int size = s->size;
    ATerm *e = s->e;
    if (s->pt<s->size) return;
    if (s->size == 0) s->size = INITSIZE;
    while (s->size<=s->pt) s->size *= 2;
    /* ATwarning("Enlarge old %d new %d", size, s->size); */
       if (!(s->e = (ATerm*) realloc(s->e, s->size*sizeof(ATerm))))
       ATerror("Cannot realloc enumerated sorts (%d)",s->size);
    if (e) ATunprotect(e);
    memset(s->e+size, 0, sizeof(ATerm)*(s->size - size));
    ATprotectArray(s->e, s->size);
    }

static void PushTerm(ATerm t) {
    Enlarge(&term_s);
    term_s.e[term_s.pt] = t;
    term_s.pt++;
    }
    
static ATerm PopTerm(void) {
   return term_s.e[--term_s.pt];
   }
          
static ATerm PopTermAppl(void) {
    int n;
    ATerm t;
    for (n=0, term_s.pt--;term_s.pt>=0&& !IsBottom(term_s.e[term_s.pt]);
       term_s.pt--,n++);
    t = (ATerm) ATmakeApplArray(
    ATmakeAFun(
        ATgetName(ATgetAFun(ATgetFirst((ATermList) term_s.e[term_s.pt]))), n, ATtrue),
          term_s.e + term_s.pt + 1);     
    return t;     
    }
    
static ATermList PopTermList(void) {
    ATermList r = ATempty;
    for (term_s.pt--;term_s.pt>=0;term_s.pt--)
    r = ATinsert(r, term_s.e[term_s.pt]);
    term_s.pt++;
    return r;
    }
    
static void EmptyTerm(void) {
    term_s.pt = 0;
    }
        
static ATerm TopTerm(void) {
    return term_s.pt>0?term_s.e[term_s.pt-1]:(ATerm) ATempty;
    }
            
 static void Copy2Win(void) {
    int l, n;
    char *pt = mcrltext;
    static ATbool skipBrace = ATfalse;
    if (dummyHeader && !strcmp(mcrltext,"dummy")) {
       skipBrace = ATtrue;
       }
    else
    if (skipBrace && mcrltext[0]=='(') skipBrace = ATfalse;
    else
    for (l = mcrlleng;l>0;l-= n) {
        n = min(l, ESIZE-yy_win.right);
        memcpy(yy_win.e+yy_win.right, pt, n); pt += n;
        if (yy_win.left <= yy_win.right) {
             yy_win.right = (yy_win.right + n) % ESIZE;
             if (yy_win.left == yy_win.right) yy_win.left = (yy_win.right+1) % ESIZE;
             }
         else {
             yy_win.right = (yy_win.right + n) % ESIZE;
             if (yy_win.right>=yy_win.left) yy_win.left = (yy_win.right+1) % ESIZE;
             }
        }
    }

static void ClearWin(void) {
    yy_win.left = yy_win.right = 0;
    }
        
static void PrintWin(void) {
    int i;
    yy_msgpt = yy_msg;
    yy_msgpt += sprintf(yy_msgpt, "syntax error line %d\n", mcrllineno);
    if (yy_win.left < yy_win.right) {
       for (i=yy_win.left+1;i<yy_win.right;i++) yy_msgpt+=sprintf(yy_msgpt, " ");
       yy_msgpt+=sprintf(yy_msgpt,"v\n");
       for (i=yy_win.left;i<yy_win.right;i++) yy_msgpt+=sprintf(yy_msgpt,"%c", yy_win.e[i]);
       }
    else {
        for (i=yy_win.left+1;i<ESIZE;i++) yy_msgpt+=sprintf(yy_msgpt, " ");
        for (i=0;i<yy_win.right;i++) yy_msgpt+=sprintf(yy_msgpt," ");
        yy_msgpt+=sprintf(yy_msgpt,"v\n");
        for (i=yy_win.left;i<ESIZE;i++) yy_msgpt+=sprintf(yy_msgpt, "%c", yy_win.e[i]);
        for (i=0;i<yy_win.right;i++) yy_msgpt+=sprintf(yy_msgpt, "%c", yy_win.e[i]); 
        }
    }
    
static void Error(char *lah) {
    if (dummyHeader) lah[strlen(lah)-1]='\0';
    ATwarning("%s%s", yy_msg, lah);
    }
        






































#line 1099 "mcrlparse.h"

#define INITIAL 0
#define sort 1
#define func 2
#define map 3
#define rew 4
#define var 5
#define term_begin 6
#define term_list_begin 7
#define term_finished 8
#define term 9
#define term_next 10
#define term_next_id 11
#define term_end 12
#define term_list 13
#define var_next 14
#define var_next_id 15
#define sort_id 16
#define func_next 17
#define func_next_id 18
#define type 19
#define type_next 20
#define type_next_id 21
#define type_id 22
#define error 23
#define keys 24
#define nextvars 25
#define sortname 26
#define rew2 27
#define term1 28
#define term2 29
#define skip 30
#define term3 31
#define term4 32
#define num_list 33
#define num_next_in 34
#define num_next_id 35
#define num_begin 36
#define num_next 37
#define eq_begin 38

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mcrllex_destroy (void );

int mcrlget_debug (void );

void mcrlset_debug (int debug_flag  );

YY_EXTRA_TYPE mcrlget_extra (void );

void mcrlset_extra (YY_EXTRA_TYPE user_defined  );

FILE *mcrlget_in (void );

void mcrlset_in  (FILE * in_str  );

FILE *mcrlget_out (void );

void mcrlset_out  (FILE * out_str  );

int mcrlget_leng (void );

char *mcrlget_text (void );

int mcrlget_lineno (void );

void mcrlset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mcrlwrap (void );
#else
extern int mcrlwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( mcrltext, mcrlleng, 1, mcrlout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( mcrlin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( mcrlin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, mcrlin))==0 && ferror(mcrlin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(mcrlin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int mcrllex (void);

#define YY_DECL int mcrllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after mcrltext and mcrlleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 201 "mcrlparse.l"



    
  
        if (enter_term_begin) BEGIN(term_begin);
        if (enter_termlist_begin) BEGIN(term_list_begin);
        if (enter_num_begin) BEGIN(num_begin);
        if (enter_eq_begin) BEGIN(eq_begin);
        
#line 1340 "mcrlparse.h"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! mcrlin )
			mcrlin = stdin;

		if ( ! mcrlout )
			mcrlout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mcrlensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				mcrl_create_buffer(mcrlin,YY_BUF_SIZE );
		}

		mcrl_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of mcrltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 424 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 423 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < mcrlleng; ++yyl )
				if ( mcrltext[yyl] == '\n' )
					   
    mcrllineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 211 "mcrlparse.l"
{
       yy_pop_state(); yy_pop_state();
       yyless(0);
       }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 217 "mcrlparse.l"
{yy_push_state(sort);yy_push_state(sort);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 218 "mcrlparse.l"
{yy_push_state(func);yy_push_state(func);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 219 "mcrlparse.l"
{yy_push_state(map);yy_push_state(map);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 220 "mcrlparse.l"
{
                   yy_vars = ATempty;
                   EmptyTerm();
                   yy_push_state(var);yy_push_state(var);
                   }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 225 "mcrlparse.l"
{yy_push_state(rew);yy_push_state(rew);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 226 "mcrlparse.l"
{yy_push_state(skip);yy_push_state(skip);}
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 229 "mcrlparse.l"
{
             yy_sorts = ATinsert(yy_sorts, ATmake("<str>", mcrltext));
             }
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 234 "mcrlparse.l"
{
                   yy_vars = ATempty;
                   EmptyTerm();
                   yy_push_state(var);yy_push_state(var);
                   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 239 "mcrlparse.l"
{yy_push_state(rew);yy_push_state(rew);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 240 "mcrlparse.l"
{yy_push_state(skip);yy_push_state(skip);}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 243 "mcrlparse.l"
{ 
          PushTerm(ATmake("<str>", mcrltext));
          BEGIN(term_finished); 
          yy_push_state(term);
          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 249 "mcrlparse.l"
{ 
          PushTerm(ATmake("<str>", mcrltext));
          yy_push_state(term4); 
          yy_push_state(term);
          }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 255 "mcrlparse.l"
{   
          PushTerm(ATmake("<str>", mcrltext));
          BEGIN(term1);yy_push_state(term);
          }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 260 "mcrlparse.l"
{
          PushTerm(ATmake("<str>", mcrltext));
          BEGIN(var_next);
          } 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 265 "mcrlparse.l"
{
          PushTerm(ATmake("<str>", mcrltext));
          BEGIN(func_next);
          }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 270 "mcrlparse.l"
{
          PushTerm(ATmake("<str>", mcrltext));
          BEGIN(func_next);
          }
	YY_BREAK
/* ----------- BEGIN FUNC -------------------------------------------------- */
/* <INIT>:           'func' func
    <func,func_next_id>: ID func_next
    <func_next>:        ',' func_next_id
                       ':' type
 */
case 18:
YY_RULE_SETUP
#line 282 "mcrlparse.l"
{
          PushTerm(ATmake("<str>", mcrltext)); 
          BEGIN(func_next);
          }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 287 "mcrlparse.l"
{BEGIN(func_next_id);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 288 "mcrlparse.l"
{BEGIN(type);}
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 292 "mcrlparse.l"
{
          result = (ATerm) PopTermList();
          PushTerm(ATmake("<str>", mcrltext));
          BEGIN(type_next);
          }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 297 "mcrlparse.l"
{
             result = (ATerm) PopTermList();
             BEGIN(type_id);}
	YY_BREAK

/* ----------------------------- T E R M -------------------------------- */
/*  <INIT>:               ID term
    <term,term_next>:     '('term_list
    <term_list>:          ID term_next
    <term_next,term_end>: ')' term_end
                          ',' term_next_id
    <term_next_id>:       ID term_next
 */
case 23:
YY_RULE_SETUP
#line 311 "mcrlparse.l"
{
             BEGIN(term_list);
             }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 315 "mcrlparse.l"
{
              ATerm t = ATmake("<str>", mcrltext);
              PushBottom(PopTerm());
              PushTerm(t);
              yy_push_state(term_next);
              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 322 "mcrlparse.l"
{
                   ATerm t = PopTermAppl();
                   PushTerm(t);
                   yy_pop_state();
                   if (yy_top_state()==term_list) BEGIN(term_end);
                   else {
                        yy_pop_state();}      
                   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 331 "mcrlparse.l"
{
                        BEGIN(term_next_id);
                        } 
	YY_BREAK

case 27:
YY_RULE_SETUP
#line 336 "mcrlparse.l"
{
            PushTerm(ATmake("<str>", mcrltext));
            BEGIN(term_next);
            }        
	YY_BREAK
case 28:
#line 342 "mcrlparse.l"
case YY_STATE_EOF(term_finished):
#line 342 "mcrlparse.l"
{
                 result = TopTerm();
                 /* ATwarning("R = %t\n", result); */
                 yyterminate();
                 }
	YY_BREAK

/* ----------- END TERM -------------------------------------------------- */
/* ----------- BEGIN REW -------------------------------------------------- */
/* <rew>:     ID <term> <term1> = <rew2> ID <term> <term2> */
case 29:
YY_RULE_SETUP
#line 356 "mcrlparse.l"
{BEGIN(rew2);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 359 "mcrlparse.l"
{  
            PushTerm(ATmake("<str>", mcrltext));
            BEGIN(term2);yy_push_state(term);
            }
	YY_BREAK
/* ----------- BEGIN VAR -------------------------------------------------- */
/* <INIT>:           'var' var
    <var,var_next_id>: ID var_next
    <var_next>:        ',' var_next_id
                       ':' sort_id
    <sort_id>:         ID <var>
 */
case 31:
YY_RULE_SETUP
#line 373 "mcrlparse.l"
{
          PushTerm(ATmake("<str>", mcrltext)); 
          BEGIN(var_next);
          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 378 "mcrlparse.l"
{BEGIN(var_next_id);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 379 "mcrlparse.l"
{BEGIN(sort_id);}
	YY_BREAK

case 34:
YY_RULE_SETUP
#line 382 "mcrlparse.l"
{
                ATermList ts = PopTermList(), r = ATempty;
                ATerm sortstring = ATmake("<str>", mcrltext);
                for (;!ATisEmpty(ts);ts=ATgetNext(ts)) {
                    ATerm name = ATgetFirst(ts);
                    r = ATinsert(r, ATmake("v(<term>,<term>)",
                        name, sortstring)); 
                    }
                yy_vars = ATconcat(yy_vars, ATreverse(r));
                /* ATwarning("V= %t\n", yy_vars); */
                BEGIN(yy_top_state());
                }
	YY_BREAK
/* ----------- BEGIN TYPE -------------------------------------------------- */
/* <INIT>:           ':' type
    <type,type_next_id>: ID type_next
    <type_next>:        "#" type_next_id
                       "->" type_id
    <type_id>:         ID <func>
 */
case 35:
YY_RULE_SETUP
#line 403 "mcrlparse.l"
{
          PushTerm(ATmake("<str>", mcrltext)); 
          BEGIN(type_next);
          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 408 "mcrlparse.l"
{BEGIN(type_next_id);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 409 "mcrlparse.l"
{BEGIN(type_id);}
	YY_BREAK

case 38:
YY_RULE_SETUP
#line 413 "mcrlparse.l"
{
                ATermList ts = PopTermList();
                ATerm sortstring = ATmake("<str>", mcrltext);
                ATermList funcs = (ATermList) result; 
                for (;!ATisEmpty(funcs);funcs = ATgetNext(funcs)) {
                   if (yy_top_state()==func)
                   yy_funcs = ATinsert(yy_funcs, ATmake("f(<term>,<term>, <term>)",
                              ATgetFirst(funcs), ts , sortstring));
                   else
                   yy_maps = ATinsert(yy_maps, ATmake("f(<term>,<term>, <term>)",
                              ATgetFirst(funcs), ts , sortstring)); 
                   }
                BEGIN(yy_top_state());
                }
	YY_BREAK
/* Format 2,4,5-6,5,7-10 : term */
case 39:
YY_RULE_SETUP
#line 431 "mcrlparse.l"
{
          int n;
          sscanf(mcrltext,"%d", &n);
          PushTerm((ATerm) ATmakeInt(n));
          yy_push_state(num_next);
          }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 438 "mcrlparse.l"
{
          int n;
          sscanf(mcrltext,"%d", &n);
          PushTerm((ATerm) ATmakeInt(n)); 
          BEGIN(num_next);
          }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 445 "mcrlparse.l"
{
          int n = ATgetInt((ATermInt)TopTerm()), i, m;
          sscanf(mcrltext,"%d", &m);
          for (i=n;i<=m;i++)
              PushTerm((ATerm) ATmakeInt(i)); 
          BEGIN(num_next);
          }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 453 "mcrlparse.l"
{BEGIN(num_next_id);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 454 "mcrlparse.l"
{BEGIN(num_next_in);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 455 "mcrlparse.l"
{BEGIN(num_list);}
	YY_BREAK

case 45:
YY_RULE_SETUP
#line 458 "mcrlparse.l"
{
                ATermList ts = PopTermList();
                ATerm sortstring = ATmake("<str>", mcrltext);
                for (;!ATisEmpty(ts);ts=ATgetNext(ts)) {
                    ATerm name = ATgetFirst(ts);
                    yy_vars = ATinsert(yy_vars, name); 
                    }
                yy_vars = ATreverse(yy_vars);  
                PushTerm(ATmake("<str>", mcrltext));
                BEGIN(term3);yy_push_state(term);
                }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 470 "mcrlparse.l"

	YY_BREAK
case 47:
/* rule 47 can match eol */
#line 473 "mcrlparse.l"
case 48:
/* rule 48 can match eol */
#line 474 "mcrlparse.l"
case YY_STATE_EOF(error):
#line 474 "mcrlparse.l"
{ 
              Error(mcrltext);return(1);
              }
	YY_BREAK

case 49:
YY_RULE_SETUP
#line 479 "mcrlparse.l"

	YY_BREAK
case 50:
YY_RULE_SETUP
#line 481 "mcrlparse.l"

	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 483 "mcrlparse.l"
{ClearWin();}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 485 "mcrlparse.l"
{less(0);yy_pop_state();}
	YY_BREAK
case YY_STATE_EOF(term):
#line 486 "mcrlparse.l"
{
            if (yy_top_state()==term2) { 
                yy_eqs = ATinsert(yy_eqs, ATmake("e(<list>)", 
                   ATinsert(PopTermList(), (ATerm) yy_vars)));
                }
            if (yy_top_state()==term3) { 
                ATerm t = PopTerm();
                t = ATsetAnnotation(t, MCRLtag, (ATerm) yy_vars);
                yy_eqs = ATinsert(yy_eqs, t);
                yy_vars = ATempty;
                }
            if (yy_top_state()==term4) { 
                ATerm t = PopTerm();
                yy_eqs = ATinsert(yy_eqs, t);
                }
            if (yy_top_state()==term_finished) {
                  result = PopTerm();
                  /* ATwarning("R = %t\n", result); */
                  }
            yyterminate();
            }
	YY_BREAK

case 53:
YY_RULE_SETUP
#line 509 "mcrlparse.l"
{
            yy_eqs = ATinsert(yy_eqs, ATmake("e(<list>)", 
               ATinsert(PopTermList(), (ATerm) yy_vars)));
            less(0);BEGIN(yy_top_state());
            }
	YY_BREAK
case YY_STATE_EOF(term2):
#line 514 "mcrlparse.l"
{ 
                yy_eqs = ATinsert(yy_eqs, ATmake("e(<list>)", 
                   ATinsert(PopTermList(), (ATerm) yy_vars)));
                yyterminate();
                }
	YY_BREAK

case 54:
YY_RULE_SETUP
#line 520 "mcrlparse.l"
{ /* Belongs to num_list */
            ATerm t = PopTerm();
            t = ATsetAnnotation(t, MCRLtag, (ATerm) yy_vars);
            yy_eqs = ATinsert(yy_eqs, t);
            yy_vars = ATempty;
            less(0);yy_pop_state();
            }
	YY_BREAK
case YY_STATE_EOF(term3):
#line 527 "mcrlparse.l"
{ 
                ATerm t = PopTerm();
                t = ATsetAnnotation(t, MCRLtag, (ATerm) yy_vars);
                yy_eqs = ATinsert(yy_eqs, t);
                yy_vars = ATempty;
                less(0);yy_pop_state();
                yyterminate();
                }
	YY_BREAK

case 55:
YY_RULE_SETUP
#line 537 "mcrlparse.l"
{ /* Belongs to term_list_begin */
            ATerm t = PopTerm();
            yy_eqs = ATinsert(yy_eqs, t);
            less(0);yy_pop_state();
            }
	YY_BREAK
case YY_STATE_EOF(term4):
#line 542 "mcrlparse.l"
{ 
                ATerm t = PopTerm();
                yy_eqs = ATinsert(yy_eqs, t);
                less(0);yy_pop_state();
                yyterminate();
                }
	YY_BREAK

case 56:
YY_RULE_SETUP
#line 549 "mcrlparse.l"
{PrintWin();BEGIN(error);}
	YY_BREAK
/* [[:space:]]+/({KEYWORD})[[:space:]] {yymore(); r = ATinsert(r, ATmake("<str>", mcrltext));}
    [[:space:]]+[[:alnum:]]+  | 
    ^[[:alnum:]]+  {yymore();} */
case 57:
YY_RULE_SETUP
#line 556 "mcrlparse.l"
ECHO;
	YY_BREAK
#line 1960 "mcrlparse.h"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(sort):
case YY_STATE_EOF(func):
case YY_STATE_EOF(map):
case YY_STATE_EOF(rew):
case YY_STATE_EOF(var):
case YY_STATE_EOF(term_begin):
case YY_STATE_EOF(term_list_begin):
case YY_STATE_EOF(term_next):
case YY_STATE_EOF(term_next_id):
case YY_STATE_EOF(term_end):
case YY_STATE_EOF(term_list):
case YY_STATE_EOF(var_next):
case YY_STATE_EOF(var_next_id):
case YY_STATE_EOF(sort_id):
case YY_STATE_EOF(func_next):
case YY_STATE_EOF(func_next_id):
case YY_STATE_EOF(type):
case YY_STATE_EOF(type_next):
case YY_STATE_EOF(type_next_id):
case YY_STATE_EOF(type_id):
case YY_STATE_EOF(keys):
case YY_STATE_EOF(nextvars):
case YY_STATE_EOF(sortname):
case YY_STATE_EOF(rew2):
case YY_STATE_EOF(term1):
case YY_STATE_EOF(skip):
case YY_STATE_EOF(num_list):
case YY_STATE_EOF(num_next_in):
case YY_STATE_EOF(num_next_id):
case YY_STATE_EOF(num_begin):
case YY_STATE_EOF(num_next):
case YY_STATE_EOF(eq_begin):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed mcrlin at a new source and called
			 * mcrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = mcrlin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( mcrlwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * mcrltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of mcrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mcrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mcrlrestart(mcrlin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mcrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 424 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 424 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 423);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up mcrltext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --mcrllineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mcrlrestart(mcrlin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mcrlwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve mcrltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    mcrllineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mcrlrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        mcrlensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            mcrl_create_buffer(mcrlin,YY_BUF_SIZE );
	}

	mcrl_init_buffer(YY_CURRENT_BUFFER,input_file );
	mcrl_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void mcrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mcrlpop_buffer_state();
	 *		mcrlpush_buffer_state(new_buffer);
     */
	mcrlensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mcrl_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (mcrlwrap()) processing, but the only time this flag
	 * is looked at is after mcrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void mcrl_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	mcrlin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE mcrl_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mcrlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mcrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mcrlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mcrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	mcrl_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mcrl_create_buffer()
 * 
 */
    void mcrl_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mcrlfree((void *) b->yy_ch_buf  );

	mcrlfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mcrlrestart() or at EOF.
 */
    static void mcrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	mcrl_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then mcrl_init_buffer was _probably_
     * called from mcrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void mcrl_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mcrl_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void mcrlpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	mcrlensure_buffer_stack();

	/* This block is copied from mcrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mcrl_switch_to_buffer. */
	mcrl_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void mcrlpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	mcrl_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		mcrl_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mcrlensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)mcrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mcrlensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)mcrlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mcrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mcrl_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mcrlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mcrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mcrl_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to mcrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mcrl_scan_bytes() instead.
 */
YY_BUFFER_STATE mcrl_scan_string (yyconst char * yystr )
{
    
	return mcrl_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to mcrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mcrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mcrlalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mcrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mcrl_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mcrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) mcrlalloc(new_size  );

		else
			(yy_start_stack) = (int *) mcrlrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mcrltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		mcrltext[mcrlleng] = (yy_hold_char); \
		(yy_c_buf_p) = mcrltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		mcrlleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int mcrlget_lineno  (void)
{
        
    return mcrllineno;
}

/** Get the input stream.
 * 
 */
FILE *mcrlget_in  (void)
{
        return mcrlin;
}

/** Get the output stream.
 * 
 */
FILE *mcrlget_out  (void)
{
        return mcrlout;
}

/** Get the length of the current token.
 * 
 */
int mcrlget_leng  (void)
{
        return mcrlleng;
}

/** Get the current token.
 * 
 */

char *mcrlget_text  (void)
{
        return mcrltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void mcrlset_lineno (int  line_number )
{
    
    mcrllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see mcrl_switch_to_buffer
 */
void mcrlset_in (FILE *  in_str )
{
        mcrlin = in_str ;
}

void mcrlset_out (FILE *  out_str )
{
        mcrlout = out_str ;
}

int mcrlget_debug  (void)
{
        return mcrl_flex_debug;
}

void mcrlset_debug (int  bdebug )
{
        mcrl_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mcrllex_destroy(), so don't allocate here.
     */

    /* We do not touch mcrllineno unless the option is enabled. */
    mcrllineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    mcrlin = stdin;
    mcrlout = stdout;
#else
    mcrlin = (FILE *) 0;
    mcrlout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mcrllex_init()
     */
    return 0;
}

/* mcrllex_destroy is for both reentrant and non-reentrant scanners. */
int mcrllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mcrl_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mcrlpop_buffer_state();
	}

	/* Destroy the stack itself. */
	mcrlfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        mcrlfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mcrllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mcrlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *mcrlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mcrlfree (void * ptr )
{
	free( (char *) ptr );	/* see mcrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 556 "mcrlparse.l"




    
static void less(int n) {
    yy_win.right = (yy_win.right - mcrlleng + n) % ESIZE;
    yyless(n);
    }
    
static ATerm ParseFile(FILE *fp) {
    mcrlrestart(fp);
    enter_term_begin = ATtrue;
    if (!result) ATprotect((ATerm*) &result); 
    result = (ATerm) ATempty;
    ClearWin();
    mcrllex();
    return ATisEqual(result, ATempty)?NULL:result;
    }
    
static ATermList Parse2File(FILE *fp) {
    mcrlrestart(fp);
    enter_termlist_begin = ATtrue;
    if (!result) ATprotect((ATerm*) &result); 
    result = (ATerm) ATempty;
    ClearWin();
    yy_eqs = ATempty;
    if (mcrllex()) return NULL;
    return ATreverse(yy_eqs);
    }
     
static ATerm Parse(char *buf) {
    YY_BUFFER_STATE s;
    enter_term_begin = ATtrue;
    if (!result) ATprotect((ATerm*) &result); 
    result = (ATerm) ATempty;
    ClearWin();
    s = mcrl_scan_string(buf);
    if (mcrllex()) return NULL;
    mcrl_delete_buffer(s);
    return ATisEqual(result, ATempty)?NULL:result;
    }
    
static ATermList Parse2(char *buf) {
    char *buffer = (char*) malloc((strlen(buf)+10)*sizeof(char));
    YY_BUFFER_STATE s;
    if (!buffer) return NULL;
    enter_term_begin = ATtrue;
    sprintf(buffer,"dummy(%s)",buf);
    dummyHeader = ATtrue;
    if (!result) ATprotect((ATerm*) &result); 
    result = (ATerm) ATempty;
    ClearWin();
    s = mcrl_scan_string(buffer);
    yy_eqs = ATempty;
    if (mcrllex()) return NULL;
    mcrl_delete_buffer(s);
    free(buffer);
    return ATisEqual(result, ATempty)?NULL:(ATermList) ATgetArguments(
    (ATermAppl) result);
    }
    
static ATerm ParseAdt(FILE *fp) {
    mcrlrestart(fp);
    if (!result) ATprotect((ATerm*) &result); 
    if (!yy_vars) ATprotect((ATerm*) &yy_vars);
    if (!yy_eqs) ATprotect((ATerm*) &yy_eqs);
    if (!yy_sorts) ATprotect((ATerm*) &yy_sorts);
    if (!yy_maps) ATprotect((ATerm*) &yy_maps);
    if (!yy_funcs) ATprotect((ATerm*) &yy_funcs);
    result = (ATerm) ATempty;
    yy_eqs =  ATempty;
    yy_vars = ATempty;
    yy_sorts = ATempty;
    yy_maps = ATempty;
    yy_funcs = ATempty;
    ClearWin();
    if (mcrllex()) exit(1);
    result = ATmake("d(s(<term>,<term>,<term>),<term>)", 
         ATreverse(yy_sorts), 
         ATreverse(yy_funcs), 
         ATreverse(yy_maps), ATreverse(yy_eqs));
    /* ATwarning("Result = %t", result); */
    return result;
    }
    
static ATermList ParseEqs(FILE *fp) {
    mcrlrestart(fp);
    enter_eq_begin = ATtrue;
    if (!result) ATprotect((ATerm*) &result); 
    if (!yy_vars) ATprotect((ATerm*) &yy_vars);
    if (!yy_eqs) ATprotect((ATerm*) &yy_eqs);
    result = (ATerm) ATempty;
    yy_eqs = ATempty;
    yy_vars = ATempty;
    ClearWin();
    if (mcrllex()) exit(1);
    return ATreverse(yy_eqs);
    }

static ATermList ParseConditions(FILE *fp) {
    mcrlrestart(fp);
    enter_num_begin = ATtrue;
    if (!result) ATprotect((ATerm*) &result); 
    if (!yy_vars) ATprotect((ATerm*) &yy_vars);
    if (!yy_eqs) ATprotect((ATerm*) &yy_eqs);
    result = (ATerm) ATempty;
    yy_eqs = ATempty;
    yy_vars = ATempty;
    ClearWin();
    if (mcrllex()) exit(1);
    return ATreverse(yy_eqs);
    }
    
#ifndef MCRL_H            
main(int argc, char *argv[]) {
    ATinit(argc, argv, (ATerm*) &argc);
    ATfprintf(stderr, "Result = %t\n", ParseEqs(stdin));
    }
#endif

