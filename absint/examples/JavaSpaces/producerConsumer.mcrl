
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
map 1,2,3,4,5,6,7,8,9,10, 20, 40, 80, 100:-> Nat
rew 1 = S(0)
	 2 = S(S(0))
	 3 = S(S(S(0)))
	 4 = S(S(S(S(0))))
	 5 = S(S(S(S(S(0)))))
	 6 = S(S(S(S(S(S(0))))))
	 7 = S(S(S(S(S(S(S(0)))))))
	 8 = S(S(S(S(S(S(S(S(0))))))))
	 9 = S(S(S(S(S(S(S(S(S(0)))))))))
	 10 = S(S(S(S(S(S(S(S(S(0)))))))))
	 20 = S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(0))))))))))))))))))
	 40 = S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(0))))))))))))))))))))))))))))))))))))
    80 = S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
	100 = S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(S(0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%-------------------------------------------------------------------------------
% STANDARD DATA TYPES BOOL, NAT and BIT
%-----------------------------------------------------------------------------
sort	Bool
func 	T,F:->Bool	
map		eq:Bool#Bool->Bool
		not:Bool->Bool
		and,or:Bool#Bool->Bool
		if:Bool#Bool#Bool->Bool
var	x,y:Bool
rew	eq(T,T)=T
		eq(F,F)=T
		eq(T,F)=F
		eq(F,T)=F
		and(T,x) = x
		and(F,x) = F
		and(x,F) = F
		and(x,T) = x	
		or(T,x) = T
		or(F,x) = x
		or(x, T) = T
		or(x, F) = x
		not(T) = F
		not(F) = T
		not(not(x)) = x
		if(T,x,y) = x
		if(F,x,y) = y

sort	Nat
func	0:->Nat
		S:Nat->Nat
map	eq:Nat#Nat->Bool
		P:Nat->Nat
		plus:Nat#Nat->Nat
		lt:Nat#Nat->Bool
		gt:Nat#Nat->Bool
		ge:Nat#Nat->Bool
		le:Nat#Nat->Bool
		if:Bool#Nat#Nat->Nat
var		x,y:Nat
rew		eq(x,x) = T
		eq(0,S(x)) = F
		eq(S(x),0) = F
		eq(S(x),S(y)) = eq(x,y)	
		eq(x,S(x)) = F
		eq(S(x),x) = F		
		plus(x,0) = x
		plus(x,S(y)) = S(plus(x,y))
		ge(x,0) = T
		ge(0,S(x)) = F
		ge(S(x),S(y)) = ge(x,y)
		gt(x,y) = ge(x,S(y))
		lt(x,y) = gt(y,x)
		le(x,y) = ge(y,x)
		if(T,x,y) = x
		if(F,x,y) = y
		P(0) = 0
		P(S(x)) = x

% Bit: it is not used in the JavaSpace specification

sort	Bit
func	b0,b1:->Bit
map		eq:Bit#Bit-> Bool
		not:Bit->Bit
var		b:Bit
rew		eq(b1,b1) = T
		eq(b0,b0) = T
		eq(b0,b1) = F
		eq(b1,b0) = F
		not(b0) = b1
		not(b1) = b0


	
%-------------------------------------------------------------------------------
% CORE DATA STRUCTURES
%-------------------------------------------------------------------------------
		
% Time: ~natural, use to specify timeout, leases, ...
% 	tt: Nat -> Time % Time with an specified value
%	FOREVER: -> Time % The maximum value of time

sort 	Time
func	tt:Nat->Time
		FOREVER:->Time
map	eq:Time#Time->Bool
		plus:Time#Time->Time
		lt:Time#Time->Bool
		gt:Time#Time->Bool
		ge:Time#Time->Bool
		le:Time#Time->Bool
		S:Time->Time
		decT:Time->Time
var	x, x':Nat
		t1, t2: Time
rew   eq(FOREVER, FOREVER) = T
		eq(tt(x), FOREVER) = F
		eq(tt(x), tt(x')) = eq(x,x')
		eq(FOREVER, tt(x)) = F
		plus(FOREVER, FOREVER) = FOREVER
		plus(tt(x), FOREVER) = FOREVER
		plus(tt(x), tt(x')) = tt(plus(x,x'))
		plus(FOREVER, tt(x)) = FOREVER
		lt(FOREVER, FOREVER) = F
		lt(tt(x), FOREVER) = T
		lt(tt(x), tt(x')) = lt(x,x')
		lt(FOREVER, tt(x)) = F
		le(FOREVER, FOREVER) = T
		le(tt(x), FOREVER) = T
		le(tt(x), tt(x')) = le(x,x')
		le(FOREVER, tt(x)) = F
		gt(FOREVER, FOREVER) = F
		gt(tt(x), FOREVER) = F
		gt(tt(x), tt(x')) = gt(x,x')
		gt(FOREVER, tt(x)) = T
		ge(FOREVER, FOREVER) = T
		ge(tt(x), FOREVER) = F
		ge(tt(x), tt(x')) = ge(x,x')
		ge(FOREVER, tt(x)) = T
		S(FOREVER) = FOREVER
		S(tt(x)) = tt(S(x)) 

		decT(tt(x)) = tt(P(x))
		decT(FOREVER) = FOREVER

% TypeAction: 5 types of actions: 
%		read, take, readIfExists takeIfExists and notify
% 	Notify is not used in this specification			

sort 	TypeAction
func 	takeA, readA, takeEA, readEA, notifyA:->TypeAction
map		eq:TypeAction#TypeAction->Bool
var	ta1, ta2: TypeAction
rew		eq(takeA, takeA) = T
		eq(readA, readA) = T
		eq(takeEA, takeEA) = T
		eq(readEA, readEA) = T
		eq(notifyA, notifyA) = T
		eq(takeA, readA) = F
		eq(takeA, readEA) = F
		eq(takeA, takeEA) = F
		eq(takeA, notifyA) = F
		eq(readA, takeA) = F
		eq(readA, readEA) = F
		eq(readA, takeEA) = F
		eq(readA, notifyA) = F
		eq(takeEA, readA) = F
		eq(takeEA, readEA) = F
		eq(takeEA, takeA) = F
		eq(takeEA, notifyA) = F
		eq(readEA, readA) = F
		eq(readEA, takeA) = F
		eq(readEA, takeEA) = F
		eq(readEA, notifyA) = F
		eq(notifyA, readA) = F
		eq(notifyA, takeA) = F
		eq(notifyA, takeEA) = F
		eq(notifyA, readEA) = F


% Object: object stored in the space
% object(entry, lease)
%	entry:	the data 
%	lease:	expiration time in clock ticks
%
%	isExpired:	T if the lease has been expired

sort	Object
func	object:Entry#Time->Object
map	eq:Object#Object->Bool
		entry:Object->Entry
		lease:Object->Time
		decT:Object->Object
		isExpired:Object->Bool
var	o,o':Object
		e:Entry
		l,time:Time
rew		eq(o, o') = and(
						eq(lease(o), lease(o')), 
						eq(entry(o), entry(o')))
		entry(object(e,l)) = e
		lease(object(e,l)) = l
		decT(object(e,l)) = object(e, decT(l)) 
		isExpired(o) = eq(lease(o), tt(0))	
	
% Action: current peding actions in the space (read, takes, readIfExists...)
% action(type, query)
%	type:	type of action read, take, readIfExists,...
%	query:		the query
%
%	isExpired:	T if the timeout has been expired

sort 	Action
func 	action:TypeAction#Query->Action
map	eq:Action#Action->Bool
		type:Action->TypeAction
		query:Action->Query
var	a,a':Action
		type:TypeAction
		q:Query
rew	eq(a,a') = and(eq(type(a), type(a')),
						eq(query(a), query(a')))						
		type(action(type,q)) = type
		query(action(type, q)) = q
	
%-------------------------------------------------------------------------------
% SYSTEM DATA BASES
%-------------------------------------------------------------------------------
% Object Set: Stores the objects 

sort 	ObjectSet
func	emO:->ObjectSet 
		in:Object#ObjectSet->ObjectSet 
map	eq:ObjectSet#ObjectSet->Bool
		if:Bool#ObjectSet#ObjectSet->ObjectSet
		rem:Object#ObjectSet->ObjectSet
		get:ObjectSet#Object->Bool
		U:ObjectSet#ObjectSet->ObjectSet
		areTimeouts:ObjectSet->Bool
		decT:ObjectSet->ObjectSet	
		len:ObjectSet->Nat

var	S,S':ObjectSet
		o,o':Object
		time:Time
		query:Query
		n, max:Nat
rew	eq(emO,emO) = T
		eq(emO,in(o,S)) = F
		eq(in(o,S),emO) = F
		eq(in(o,S),in(o',S')) = and(eq(o,o'),eq(S,S')) % List
		if(T,S,S') = S
		if(F,S,S') = S'	
		rem(o,emO) = emO
		rem(o,in(o',S)) = if(eq(o,o'),S,in(o',rem(o,S)))	
		get(emO,o) = F
		get(in(o,S),o') = or(eq(o,o'),get(S,o'))		
		U(S,emO)=S
		U(emO,S)=S
		U(S,in(o,S'))=U(in(o,S),S')	
		areTimeouts(emO) = F
		areTimeouts(in(o, S)) = 
			if(not(or(eq(lease(o), FOREVER), 
				isExpired(o))), T, areTimeouts(S))  		
	
		decT(emO) = emO
		decT(in(o, S)) = in(decT(o), decT(S))
		
		len(emO) = 0
		len(in(o, S)) = S(len(S))
				
% Action Set: Stores the pending actions

sort 	ActionSet 
func	emA:->ActionSet 
		in:Action#ActionSet->ActionSet 
map	eq:ActionSet#ActionSet->Bool
		if:Bool#ActionSet#ActionSet->ActionSet
		rem:Action#ActionSet->ActionSet		
		U:ActionSet#ActionSet->ActionSet		
		get:ActionSet#Action->Bool
		match:Object#ActionSet->Bool	
		len:ActionSet->Nat

var	S,S':ActionSet
		a,a':Action
		time:Time
		pID:Nat
		M:ObjectSet
		n,max:Nat
		o:Object
rew		
		eq(emA,emA) = T
		eq(emA,in(a,S)) = F
		eq(in(a,S),emA) = F
		eq(in(a,S),in(a',S')) = and(eq(a,a'),eq(S,S')) % List
		if(T,S,S') = S
		if(F,S,S') = S'	
		rem(a,emA) = emA
		rem(a,in(a',S)) = if(eq(a,a'),S,in(a',rem(a,S)))	
		U(S,emA)=S
		U(emA,S)=S
		U(S,in(a,S'))=U(in(a,S),S')		
		get(emA,a) = F
		get(in(a,S),a') = or(eq(a,a'),get(S,a'))	
	
		match(o, emA) = F
		match(o, in(a, S)) = if(match(query(a), entry(o)), T, match(o, S))

		len(emA) = 0
		len(in(a, S)) = S(len(S))

%-------------------------------------------------------------------------------
% DEFINITION OF JavaSpace Interface
%-------------------------------------------------------------------------------


% Primitives:
% 	Write(processID, entry, trc, lease)
%	
% 	Read(processID, trcID, timeout, query) 
%	Take(processID, trcID, timeout, query) 
% 	ReadE(processID, trc, timeout, query) 
%	TakeE(procressID, trc, timeout) 
%
%	These 4 actions are followed by:
%		Return(processID, entry)
%		The returned entry may be null (entryNull)
%
% 	Create(processID, transactionID, timeout) 
%
%	Commit(processID, transactionID)
%	Abort(processID, transactionID)
%
%		While a transaction is active it may be followed 
%		by Exception(transactionID) 
%
%	clock. Clock tick, it increases the clock counter.
%	tau_gc. Tau step, for every garbage collection (expired object)


act 	write, Write, W : Entry#Time
    	take, Take, T : Query
    	takeReturn, TakeReturn, takeRt: Query#Entry
		
		gc: Entry	
		tick

comm	write|Write = W
		take|Take = T
		takeReturn|TakeReturn = takeRt

%-------------------------------------------------------------------------------
% DEFINITION OF JavaSpace PROCESS
%-------------------------------------------------------------------------------

proc 	JavaSpace(M:ObjectSet, PA: ActionSet) = 

% JavaSpace process:
%	M -> Object Set
%	PA -> Pending actions


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%		WRITE PRIMITIVE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Write entry
% Inserts the object in the Object Set
	
	sum(e:Entry, sum(lease:Time, 
		Write(e, lease)
		.JavaSpace(in(object(e, lease),M), PA)			 
	<|	
		lt(len(M), maxObjects)				
	|> 
	delta))
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%		GARBAGE COLLECTOR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% Removes an expired entry from the entry set
% Entries that are matched by some query cannot be removed
	
	+
	sum(o:Object, 
		gc(entry(o))
		.JavaSpace(rem(o,M), PA)
	<|	and(and(
		get(M,o),
		isExpired(o)),
		not(match(o, PA))
		)  
	|> delta)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%		TAKE PRIMITIVE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	

% Creation of a pending take action 
	
	+
	sum(query:Query, 
		Take(query)
		.JavaSpace(M, in(action(takeA, query), PA))
	<|	
		lt(len(PA), maxActions)				
	|> delta)
		

% Return of a take action
	
	+
	sum(a: Action, sum(o:Object,  
		takeReturn(query(a), entry(o))
		.JavaSpace(rem(o, M), rem(a, PA))
	<| and(and(and(
		get(M, o),
		get(PA, a)), 
		match(query(a), entry(o))),
		eq(type(a), takeA))
	|> 
	delta))


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%		CLOCK
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Clock tick, only when there are not expired objects 
%	and there are objects waiting for a timeout
 
	+
	tick.JavaSpace(decT(M), PA)
	<| 
		areTimeouts(M)
	 |> delta 
	


%-----------------------------------------------------------------------
% SYSTEM DEFINITION

% Entry

sort 	Entry 
func 	entryNull:->Entry
		A, B:->Entry
map	eq:Entry#Entry->Bool
var	e, e1, e2:Entry
		n, n':Nat
rew	eq(entryNull,entryNull) =  T
		eq(A,A) =  T
		eq(B,B) =  T
				
		eq(entryNull,A) =  F
		eq(entryNull,B) =  F
		
		eq(A, entryNull) =  F
		eq(A,B) =  F
		
		eq(B, entryNull) =  F
		eq(B,A) =  F
		
		
% Query
	
sort 	Query
func	typeA:->Query
		typeB:->Query
map	match:Query#Entry->Bool % check if an entry satisfy a query
		eq:Query#Query->Bool
var 	e, e':Entry
		n:Nat
		q, q': Query
rew	match(q, entryNull) = F
		match(typeA, A) = T
		match(typeA, B) = F
		
		match(typeB, A) = F
		match(typeB, B) = T
		
		eq(typeA, typeA) = T
		eq(typeB, typeB) = T
	
		eq(typeA, typeB) = F
		eq(typeB, typeA) = F
		
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% Table definition as an ordered list of counters		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sort Pair
func
	p: D#Nat->Pair
map
	match:Nat->Bool
var
	n,n': Nat
	s,s': D
rew
	match(n) = if(lt(0, n), T, F)	

sort
	DTableC
func
	emTableC:-> DTableC
	ins:Pair#DTableC-> DTableC
map
   get:D#DTableC -> Bool
   rem:D#DTableC -> DTableC
   upd:D#D#DTableC -> DTableC
	insert:D#DTableC -> DTableC % insert ordered
	if:Bool#DTableC#DTableC -> DTableC
var
	d, d': D
	dt, dt': DTableC
	n, n': Nat
rew	
	if(T, dt, dt') = dt
	if(F, dt, dt') = dt'
	
	get(d, emTableC) = F
	get(d, ins(p(d', n), dt)) = 
		if(eq(d, d'), match(n), get(d, dt))
		
	upd(d, d', dt) = insert(d, rem(d', dt))
	
	insert(d, emTableC) = ins(p(d, 1), emTableC)
	insert(d, ins(p(d', n), dt)) = 
		if(eq(d, d'), ins(p(d, S(n)), dt),
			if(lt(d', d),
				ins(p(d', n), insert(d, dt)), 
				ins(p(d, 1), ins(p(d', n), dt))))
			
	rem(d, emTableC) = emTableC
	rem(d, ins(p(d', n), dt)) = 
		if(eq(d, d'), ins(p(d, P(n)), dt),
		ins(p(d', n), rem(d, dt))) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
sort D 
func
	 taking,waiting,writing:->D
map
	eq:D#D->Bool
	if:Bool#D#D->D
	lt:D#D->Bool
var
	s, s': D
rew
	eq(taking,taking) = T
	eq(taking,waiting) = F
	eq(taking,writing) = F
	eq(waiting,taking) = F
	eq(waiting,waiting) = T
	eq(waiting,writing) = F
	eq(writing,taking) = F
	eq(writing,waiting) = F
	eq(writing,writing) = T
	if(T, s, s') = s
	if(F, s, s') = s'
	lt(s,s) = F
	lt(taking,waiting) = T
	lt(taking,writing) = T
	lt(waiting,taking) = F
	lt(waiting,writing) = T
	lt(writing,taking) = F
	lt(writing,waiting) = F


proc TransformersC(dt: DTableC) = 
	 sum(d: D, 
	 	take(typeA).
		TransformersC(upd(waiting, d, dt))
		<|and(get(d, dt), eq(d, taking))|> delta +
			
	 	TakeReturn(typeA, A).
		TransformersC(upd(writing, d, dt))
		<|and(get(d, dt), eq(d, waiting))|> delta +	
	 	
		write(B, tout).
		TransformersC(upd(taking, d, dt))
		<|and(get(d, dt), eq(d, writing))|> delta)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
map 	maxObjects:->Nat
rew 	maxObjects =  2

map 	maxActions:->Nat
rew 	maxActions =  S(N)

map tout:->Time
rew tout = tt(S(0))							
		
map initTable:->DTableC		
										
proc Producer =
	 write(A, tout)
	 .Producer
	 
proc Transformer =
	take(typeA)
	.TakeReturn(typeA, A)
	.write(B, tout)
	.Transformer

proc Consumer =	
	take(typeB)
	.TakeReturn(typeB, B)
	.Consumer


Tras1 = Transformer
Tras2 = Transformer || Tras1
Tras3 = Transformer || Tras2
Tras4 = Transformer || Tras3
Tras5 = Transformer || Tras4
Tras6 = Transformer || Tras5
Tras7 = Transformer || Tras6
Tras8 = Transformer || Tras7
Tras9 = Transformer || Tras8
Tras10 = Transformer || Tras9
Tras11 = Transformer || Tras10
Tras12 = Transformer || Tras11
Tras13 = Transformer || Tras12
Tras14 = Transformer || Tras13


Tras1C = TransformersC(ins(p(taking, 1), emTableC))
Tras2C = TransformersC(ins(p(taking, 2), emTableC))
Tras3C = TransformersC(ins(p(taking, 3), emTableC))
Tras4C = TransformersC(ins(p(taking, 4), emTableC))
Tras5C = TransformersC(ins(p(taking, 5), emTableC))
Tras6C = TransformersC(ins(p(taking, 6), emTableC))
Tras7C = TransformersC(ins(p(taking, 8), emTableC))
Tras9C = TransformersC(ins(p(taking, 9), emTableC))
Tras10C = TransformersC(ins(p(taking, 10), emTableC))
Tras20C = TransformersC(ins(p(taking, 20), emTableC))
Tras40C = TransformersC(ins(p(taking, 40), emTableC))
Tras80C = TransformersC(ins(p(taking, 80), emTableC))

TrasXC = TransformersC(initTable)
 
map N:->Nat
rew N = 20


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	 				
init encap({write, Write, take, Take, takeReturn, TakeReturn}, 
			JavaSpace(emO, emA) 
		|| Producer || Consumer 
		|| TrasXC) 





