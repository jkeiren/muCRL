func
	absFIFO:Nat -> abs_FIFO   
map	
	abs_eq:abs_FIFO#abs_FIFO -> Bool
   H:FIFO -> abs_FIFO
   rest:abs_FIFO -> setOf_abs_FIFO
   len:abs_FIFO -> setOf_Nat
   put:abs_D#abs_FIFO -> setOf_abs_FIFO
var
	n, n1:Nat
	ad: abs_D
	f: FIFO
rew
	H(f) = absFIFO(len(f))
	abs_eq(absFIFO(n), absFIFO(n1)) = eq(n, n1)
	rest(absFIFO(S(n))) = sing(absFIFO(n))
	len(absFIFO(n)) = sing(n)
   put(ad, absFIFO(n)) = sing(absFIFO(S(n)))
	
