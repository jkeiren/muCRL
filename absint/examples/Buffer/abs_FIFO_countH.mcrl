func
	emptyF, middleF, fullF:-> abs_FIFO
map
	absLenRec: Nat-> setOf_Nat

var
	n, n1:Nat
	ad: abs_D
	f: FIFO
	af, af1: abs_FIFO
rew
	H(f) = absIf(eq(len(f),0), emptyF, absIf(lt(len(f), N), middleF, fullF))
	abs_eq(af, af) = T
	
	abs_eq(middleF,fullF) = F							 
   abs_eq(middleF,emptyF) = F							 
   
   abs_eq(emptyF,fullF) = F								 
   abs_eq(emptyF,middleF) = F							 
  
   abs_eq(fullF,emptyF) = F								 
   abs_eq(fullF,middleF) = F							 
   	
	rest(emptyF) = empty_setOf_abs_FIFO
	rest(middleF) = in_setOf(middleF, sing(emptyF))
	rest(fullF) = sing(middleF)
	
   put(ad, emptyF) = sing(middleF)
   put(ad, middleF) = in_setOf(middleF, sing(fullF))
   put(ad, fullF) = empty_setOf_abs_FIFO
	
	len(emptyF) = sing(0)
	len(fullF) = sing(N)
	len(middleF) = absLenRec(N)
	
	absLenRec(0) = empty_setOf_Nat
	absLenRec(S(n)) = if(eq(S(n), N), absLenRec(n), in_setOf(S(n), absLenRec(n)))
	
