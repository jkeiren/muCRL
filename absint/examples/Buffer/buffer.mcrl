sort
     Nat Bool 
func
     F:->Bool
     T:->Bool
     0:->Nat
     S:Nat->Nat
map
     eq:Bool#Bool->Bool
     not:Bool->Bool
     or:Bool#Bool->Bool
     and:Bool#Bool->Bool
     if:Bool#Bool#Bool->Bool
     eq:Nat#Nat->Bool
     P:Nat->Nat
     lt:Nat#Nat->Bool
     gt:Nat#Nat->Bool
var
     x,y:Bool
rew
     if(F,x,y) = y								 % 1
     if(T,x,y) = x								 % 2
     not(not(x)) = x								 % 3
     not(F) = T									 % 4
     not(T) = F									 % 5
     or(x,F) = x								 % 6
     or(x,T) = T								 % 7
     or(F,x) = x								 % 8
     or(T,x) = T								 % 9
     and(x,T) = x								 % 10
     and(x,F) = F								 % 11
     and(F,x) = F								 % 12
     and(T,x) = x								 % 13
     eq(F,T) = F								 % 14
     eq(T,F) = F								 % 15
     eq(F,F) = T								 % 16
     eq(T,T) = T								 % 17
var
     x,y:Nat
rew
     gt(x,y) = lt(y,x)								 % 18
     lt(S(x),S(y)) = lt(x,y)							 % 19
     lt(0,S(x)) = T								 % 20
     lt(x,0) = F								 % 21
     P(S(x)) = x								 % 22
     eq(S(x),S(y)) = eq(x,y)							 % 23
     eq(S(x),0) = F								 % 24
     eq(0,S(x)) = F								 % 25
     eq(x,x) = T								 % 26

sort  D
func  d00, d01: -> D

act   Write, write, W: D
      Read, read, R: D
		empty_buffer full_buffer
		
comm  Write|write=W
      Read|read=R	

map   N:->Nat
rew   N = S(S(S(0)))


sort FIFO
func emF:-> FIFO
	  put: D#FIFO -> FIFO
map
	  get: FIFO -> D
	  rest: FIFO -> FIFO
	  len: FIFO -> Nat
var
	  n1, n0:D
	  f:FIFO
rew
     get(put(n0, emF)) = n0
	  get(put(n1, put(n0, f))) = get(put(n0, f))
	  
     rest(put(n0, emF)) = emF
	  rest(put(n1, put(n0, f))) = put(n1, rest(put(n0, f)))
	  
	  len(emF) = 0
	  len(put(n0, f)) = S(len(f))

proc producer =
   sum(d:D, write(d).producer)	
		
proc consumer =
   sum(d:D, read(d).consumer)

proc buffer(f:FIFO) =
   sum(d:D, Write(d).buffer(put(d, f))
   <| lt(len(f), N) |> delta)+

   Read(get(f)).buffer(rest(f))
   <| lt(0, len(f)) |> delta+
	
	empty_buffer.buffer(f)
	<| eq(0, len(f)) |> delta+
	
	full_buffer.buffer(f)
	<| eq(N, len(f)) |> delta
	 
	 
init (encap({read, Read, write, Write}, buffer(emF) || producer || consumer))
